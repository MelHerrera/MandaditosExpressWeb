@model MandaditosExpress.Models.ViewModels.CotizacionViewModel

@{
    ViewBag.Title = "Cotización";

}

@section Styles {
    @Styles.Render("~/Content/site/register")
}

<style>
    .register {
        width: 817px;
    }

    .signup-image {
        margin-top: 0px;
    }
</style>

@if (Request.IsAuthenticated)
{
    <style>
        .main {
            background: #f8f8f8;
            padding: 10px 0px 10px 0px;
        }

        .register {
            background: #fff;
            margin: 0 auto;
            box-shadow: 0 15px 16.83px .17px rgba(0,0,0,.05);
            -moz-box-shadow: 0 15px 16.83px .17px rgba(0,0,0,.05);
            -webkit-box-shadow: 0 15px 16.83px .17px rgba(0,0,0,.05);
            -o-box-shadow: 0 15px 16.83px .17px rgba(0,0,0,.05);
            -ms-box-shadow: 0 15px 16.83px .17px rgba(0,0,0,.05);
            border-radius: 20px;
            -moz-border-radius: 20px;
            -webkit-border-radius: 20px;
            -o-border-radius: 20px;
            -ms-border-radius: 20px
        }
    </style>
}
else
{
    <style>

        .landing-page .navbar-default .nav li a {
            color: #000;
            font-family: 'Open Sans', helvetica, arial, sans-serif;
            font-weight: 700;
            letter-spacing: 1px;
            text-transform: uppercase;
        }

        .landing-page .navbar-fixed-top {
            border-bottom: 1px solid #e7eaec !important;
            background-color: #ffffff;
        }
    </style>
}

<div class="main">
    <section class="signup">
        <div class="container">
            <div class="register">
                <div class="signup-content">
                    <div class="signup-form">
                        <h4>Estimada(o) @ViewBag.Cliente Cotizá nuestros precios</h4>
                        @using (Html.BeginForm("Cotizar", "Cotizaciones", FormMethod.Post, new { @class = "frm-cotizar create-form" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <br />
                            <div class=" row">
                                <div class="col-md-12">
                                    <div class="form-group">

                                        @Html.LabelFor(model => model.TipoDeServicioId, htmlAttributes: new { @class = "control-label label-agree-term" })
                                        <select data-bind="value:selectedValue, options: options, optionsText: 'text', optionsValue: 'value', valueAllowUnset: true,optionsCaption: 'seleccione un elemento'">
                                        </select>

                                        <p> valor seleccionado: <span data-bind="text:selectedValue"></span></p>

                                        @*<select data_bind="options:availableCars,optionsText:carName,value:selectedCar"></select>*@
                                    </div>
                                    @Html.ValidationMessageFor(model => model.TipoDeServicioId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class=" row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label for="@Model.DescripcionDeCotizacion"><i class="fa fa-align-justify"></i></label>
                                        <input type="text" name="DescripcionDeCotizacion" placeholder="Descripcion" @*data-bind="value:DescripcionDeCotizacion"*@ />
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DescripcionDeCotizacion, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group">
                                        <label for="@Model.MontoDeDinero"><i class="fa fa-sort"></i></label>
                                        <input type="text" name="MontoDeDinero" placeholder="Monto de Dinero" class="MontoDeDinero" @*data-bind="value:MontoDeDinero"*@ />
                                    </div>
                                    @Html.ValidationMessageFor(model => model.MontoDeDinero, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class=" row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label for="@Model.DireccionDeOrigen"><i class="fa fa-dot-circle-o"></i></label>
                                        <input type="text" name="DireccionDeOrigen" placeholder="Direccion De Origen" class="DireccionDeOrigen" @*data-bind="value:DireccionDeOrigen"*@ />
                                    </div>
                                    @Html.ValidationMessageFor(model => model.DireccionDeOrigen, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class=" row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label for="@Model.DireccionDestino"><i class="fa fa-map-marker"></i></label>
                                        <input type="text" name="DireccionDestino" placeholder="Direccion Destino" @*data-bind="value:DireccionDestino"*@ class="DireccionDestino" />
                                    </div>
                                    <h5>Distancia Origen-Destino:<input type="number" name="DistanciaOrigenDestino" @*data-bind="value:DistanciaOrigenDestino"*@ class="col-md-2" style="border:none;display:inline-block;width:auto;" /></h5>
                                </div>
                            </div>

                            <div class=" row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <input type="checkbox" name="EsEspecial" @*data-bind="checked:EsEspecial"*@ style="display:inline-block;width:auto;" class="chkEmpresa" />
                                        <label for="@Model.EsEspecial" class="label-esEmpresa">¿Es Especial?</label>
                                    </div>
                                </div>
                            </div>
                            <div class="row" hidden>
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <div class="form-group">
                                            <label for="@Model.ClienteId"><i class="fa fa-user"></i></label>
                                            <input type="text" name="ClienteId" value="@ViewBag.ClienteId" placeholder="Cliente" />
                                        </div>
                                        @Html.ValidationMessageFor(model => model.ClienteId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            @*<p data-bind="text:">default state</p>
                                <p data-bind="text:Id">default Id</p>*@
                            <br />

                            <div class="form-group form-button">
                                <button type="submit" class="btn btn-success">Realizar Cotización</button>
                            </div>
                        }
                    </div>
                    <div class="signup-image">

                        <h5 class="badge badge-warning">Fecha de Validez: ></h5>

                        <div class="card widget navy-bg no-padding">
                            <div class="card-header">
                                <h3 class="m-xs font-bold text-white no-margins no-padding">Monto Total</h3>
                                <small class="m-1">Fecha de Cotización:</small>
                            </div>

                            <div class="card-body no-padding bg-white">
                                <div class="p-m">
                                    <h2 class="font-bold no-margins" style="color:black;">
                                    </h2>
                                    <small class="text-black-50">Precios ya incluyen IVA</small>
                                </div>
                                <div class="flot-chart mb-1">
                                    <div class="flot-chart-content" id="flot-chart1" style="padding: 0px; position: relative;"><canvas class="flot-base" width="581" height="125" style="direction: ltr; position: absolute; left: 0px; top: 0px; width: 464.8px; height: 100px;"></canvas><canvas class="flot-overlay" width="581" height="125" style="direction: ltr; position: absolute; left: 0px; top: 0px; width: 464.8px; height: 100px;"></canvas></div>
                                </div>
                                <div>
                                    <a href="#" class="btn btn-primary border-light float-right mb-1 mr-1">Guardar</a>
                                    <a href="#" class="btn btn-primary border-light float-right mb-1 mr-1">Solicitar Envío</a>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

<pre>
<code data-bind="html: JSON.stringify(ko.toJS($root), null, 3)"></code>
</pre>

@section Scripts
{
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/plugins/flot/jquery.flot.js"></script>
    @Scripts.Render("~/plugins/knockout")

    <script type="text/javascript">

        $(function () {

            //configuracion de grafica del widget
            var d1 = [[1262304000000, 6], [1264982400000, 3057], [1267401600000, 20434], [1270080000000, 31982], [1272672000000, 26602], [1275350400000, 27826], [1277942400000, 24302], [1280620800000, 24237], [1283299200000, 21004], [1285891200000, 12144], [1288569600000, 10577], [1291161600000, 10295]];
            var d2 = [[1262304000000, 5], [1264982400000, 200], [1267401600000, 1605], [1270080000000, 6129], [1272672000000, 11643], [1275350400000, 19055], [1277942400000, 30062], [1280620800000, 39197], [1283299200000, 37000], [1285891200000, 27000], [1288569600000, 21000], [1291161600000, 17000]];

            var data1 = [
                { label: "Data 1", data: d1, color: '#17a084' },
                { label: "Data 2", data: d2, color: '#127e68' }
            ];
            $.plot($("#flot-chart1"), data1, {
                xaxis: {
                    tickDecimals: 0
                },
                series: {
                    lines: {
                        show: true,
                        fill: true,
                        fillColor: {
                            colors: [{
                                opacity: 1
                            }, {
                                opacity: 1
                            }]
                        }
                    },
                    points: {
                        width: 0.1,
                        show: false
                    }
                },
                grid: {
                    show: false,
                    borderWidth: 0
                },
                legend: {
                    show: false
                }
            });
        });
    </script>
}

@Scripts.Render("~/plugins/knockout")

<script type="text/javascript">

    function TipoDeServicioViewModel(tiposDeServicio) {
        const self = this;
        self.Id = ko.observable(tiposDeServicio.Id);
        self.DescripcionTipoDeServicio = ko.observable(tiposDeServicio.DescripcionTipoDeServicio);
        self.EstadoTipoDeServicio = ko.observable(tiposDeServicio.EstadoTipoDeServicio);
    }


    function CotizacionViewModel(cotizacion) {
        const self = this;
        self.Id = ko.observable(cotizacion.Id || -1);
        self.DescripcionDeCotizacion = ko.observable(cotizacion.DescripcionDeCotizacion);
        self.FechaDeLaCotizacion = ko.observable(cotizacion.FechaDeLaCotizacion || new Date.now());
        self.FechaDeValidez = ko.observable(cotizacion.FechaDeValidez || new Date.now());
        self.DireccionDeOrigen = ko.observable(cotizacion.DireccionDeOrigen || "");
        self.DireccionDestino = ko.observable(cotizacion.DireccionDestino || "");
        self.DistanciaOrigenDestino = ko.observable(cotizacion.DistanciaOrigenDestino || 0);
        self.EsEspecial = ko.observable(cotizacion.EsEspecial || false);
        self.MontoTotal = ko.observable(cotizacion.MontoTotal || 0);
        self.ClienteId = ko.observable(cotizacion.ClienteId || -1);
        self.TipoDeServicioId = ko.observable(cotizacion.TipoDeServicioId || -1);
        self.MontoDeDinero = ko.observable(cotizacion.MontoDeDinero || 0);
        self.TiposDeServicios = ko.observableArray(ko.utils.arrayMap(cotizacion.TiposDeServicios, function (item) { return new TipoDeServicioViewModel({ Id: item.Id, DescripcionTipoDeServicio: item.DescripcionTipoDeServicio, EstadoTipoDeServicio: item.EstadoTipoDeServicio }) }));
    }
    function mainVM() {
        const self = this;
        self.selectedValue = ko.observable(),
            self.options = [{
                text: "FOO",
                value: "foo"
            }, {
                text: "BAR",
                value: "bar"
            }]
    };

    ko.applyBindings(new mainVM());

</script>
