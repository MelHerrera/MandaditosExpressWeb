@model MandaditosExpress.Models.ViewModels.CotizacionViewModel

@{
    ViewBag.Title = "Cotización";
    Layout = null;
}

@Styles.Render("~/Content/site/cotizacion")
@Styles.Render("~/Content/bootstrap")
@Styles.Render("~/font-awesome/css")

<style>
    .pac-container {
        z-index: 99999;
    }
</style>

<body>
    <div class="main">
        <section class="signup">
            <div class="container-fluid">
                <div class="register">
                    @using (Html.BeginForm("Guardar", "Cotizaciones", FormMethod.Post))
                    {
                        <div class="signup-content" data-bind="with:Cotizacion">
                            <div class="signup-form">
                                <h4>Estimada(o) @ViewBag.Cliente Cotizá nuestros precios</h4>


                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">

                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                    <div class="form-group row">
                                        <div class="col-auto">
                                            @Html.LabelFor(model => model.TipoDeServicioId, "TipoDeServicioId", htmlAttributes: new { @class = "control-label" })
                                        </div>
                                        <div class="col-auto">
                                            @*@Html.DropDownList("TipoDeServicioId", null, htmlAttributes: new { @class = "form-control" })*@
                                            <select class="form-control" name="TipoDeServicioId" data-bind="options: TiposDeServicios, optionsText: 'DescripcionTipoDeServicio', optionsValue: 'Id',value:TipoDeServicioId"></select>
                                            @Html.ValidationMessageFor(model => model.TipoDeServicioId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-row align-items-center">
                                        <div class="col-auto">
                                            @Html.EditorFor(model => model.DescripcionDeCotizacion, new { htmlAttributes = new { @class = "form-control mb-2", @placeholder = "Descripcion", data_bind = "value:DescripcionDeCotizacion" } })
                                            @Html.ValidationMessageFor(model => model.DescripcionDeCotizacion, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-auto col-md-5">
                                            <div class="input-group mb-2">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text"><i class="fa fa-sort"></i></div>
                                                    @Html.EditorFor(model => model.MontoDeDinero, new { htmlAttributes = new { @class = "form-control", @type = "number", @placeholder = "Monto de Dinero", @Min = 100, @title = "Por seguridad solo aceptamos montos de 100 a 10,000. Para enviar una cantidad Mayor contacte con el negocio", data_bind = "value:MontoDeDinero,enable:$root.MostrarMonto" } })
                                                </div>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.MontoDeDinero, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-row align-items-center">
                                        <div class="col">
                                            <div class="input-group mb-2">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text bg-white"><i class="fa fa-dot-circle-o"></i></div>
                                                </div>
                                                @Html.EditorFor(model => model.DireccionDeOrigen, new { htmlAttributes = new { @class = "form-control", @placeholder = "Direccion de Origen", data_bind = "value:DireccionDeOrigen,enable:$root.MostrarDirecciones, event:{focus:$root.SeleccionarDireccion}" } })
                                                @Html.ValidationMessageFor(model => model.DireccionDeOrigen, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-row align-items-center">
                                        <div class="col">
                                            <div class="input-group mb-2">
                                                <div class="input-group-prepend">
                                                    <div class="input-group-text bg-white"><i class="fa fa-map-marker"></i></div>
                                                </div>
                                                @Html.EditorFor(model => model.DireccionDestino, new { htmlAttributes = new { @class = "form-control", @placeholder = "Direccion Destino", data_bind = "value:DireccionDestino,enable:$root.MostrarDirecciones" } })
                                            </div>
                                            @Html.ValidationMessageFor(model => model.DireccionDestino, "", new { @class = "text-danger" })
                                            <small class="form-text text-muted font-weight-bold mb-2 ">
                                                Distancia: <input data-bind="value:DistanciaOrigenDestino" name="DistanciaOrigenDestino" style="border:none" />
                                            </small>
                                        </div>
                                    </div>

                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="EsEspecial" value="true" name="EsEspecial" data-bind="checked:EsEspecial">
                                        <label class="form-check-label" for="EsEspecial">
                                            ¿Es Especial?
                                        </label>
                                        @Html.ValidationMessageFor(model => model.EsEspecial, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group m-5">
                                        <div class="col-md-offset-2 col-auto">
                                            <button data-bind="click:$root.RealizarCotizacion,attr:{href:'@Url.Action("Create")'}" class="btn btn-success">
                                                Realizar Cotización
                                                <i class="fa fa-spinner fa-spin fa-lg fa-fw" data-bind="visible:$root.SendingData"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="signup-image">
                                <div class="card">
                                    <h5 class="badge badge-danger text-white align-self-end p-1" style="position:absolute">Validez: @Model.FechaDeValidez</h5>
                                    <img class="card-img-top border-bottom" src="~/Images/card-header.jpg" alt="Card image cap">
                                    <div class="card-body">
                                        <h5 class="card-title badge badge-success p-2">Monto Total</h5>

                                        <div class="row no-margins no-padding">
                                            <div class="col-6 align-items-center"><span id="sparkline" class="m-0"></span></div>
                                            <div class="col-6 align-items-center">
                                                <div class="mb-1 align-items-center">
                                                    <div class="input-group h2">
                                                        <h2 class="font-weight-bold h2">
                                                            C$
                                                            <span data-bind="text:MontoTotal" class="text-danger mr-2"></span>
                                                        </h2>
                                                        <input type="text" class="MontoTotalInput" name="MontoTotal" hidden />
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <small class="text-black-50 mt-2">Precios ya incluyen IVA</small>

                                        <div data-bind="with:$root.MostrarOpciones" class="mt-2">
                                            <input type="button" class="btn-success btn" value="Solicitar Envio" data-bind="click:$root.RealizarEnvio" />
                                            <button type="submit" class="btn btn-default border-success" data-bind="click:$root.Guardar"><i class="fa fa-clock-o"></i> Guardar </button>
                                        </div>
                                        <small><i class="fa fa-calendar"></i> @Model.FechaDeLaCotizacion</small>

                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </section>
    </div>
</body>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="form-group">
                        <div class="row">
                            <label class="control-label col-sm-2">Ubicacion:</label>
                            <input type="text" class="form-control col-sm-8" id="MapAdressBox" />
                            <button type="button" class="close col-sm-1 align-items-end" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                    <div id="ModalMap" style="width:100%;height:400px;"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<pre>
<code data-bind="html: JSON.stringify(ko.toJS($root), null, 3)"></code>
</pre>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/bootstrap")
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDmKbJfbvqtbp9AoRjEAn-90N75Wa2CdIg"></script>
@Scripts.Render("~/plugins/locationpicker")
@Scripts.Render("~/plugins/knockout")
@Scripts.Render("~/plugins/sparkline")
@Scripts.Render("~/plugins/moment")
@Scripts.Render("~/plugins/sweetalert")
@Scripts.Render("~/plugins/notify")
<script type="text/javascript">

    $(function () {
        InicializarGrafico();
        $("#ModalMap").locationpicker({
            radius: 0,
            location: {
                latitude: 12.128145869138876,
                longitude: -86.26501267501537
            },
            enableAutocomplete: true,
            inputBinding: {
                locationNameInput: $("#MapAdressBox")
            }
        });
    });

    $("#myModal").on('shown.bs.modal', function () {
        $("#ModalMap").locationpicker('autosize');
    });

                    function TipoDeServicioViewModel(tiposDeServicio) {
                        const self = this;
                        self.Id = ko.observable(tiposDeServicio.Id);
                        self.DescripcionTipoDeServicio = ko.observable(tiposDeServicio.DescripcionTipoDeServicio);
                        self.EstadoTipoDeServicio = ko.observable(tiposDeServicio.EstadoTipoDeServicio);
                    }


                    function CotizacionViewModel(cotizacion) {
                        const self = this;
                        self.Id = ko.observable(cotizacion.Id || -1);
                        self.DescripcionDeCotizacion = ko.observable(cotizacion.DescripcionDeCotizacion || "");
                        self.FechaDeLaCotizacion = ko.observable(cotizacion.FechaDeLaCotizacion || "");
                        self.FechaDeValidez = ko.observable(cotizacion.FechaDeValidez || "");
                        self.DireccionDeOrigen = ko.observable(cotizacion.DireccionDeOrigen || "");
                        self.DireccionDestino = ko.observable(cotizacion.DireccionDestino || "");
                        self.DistanciaOrigenDestino = ko.observable(cotizacion.DistanciaOrigenDestino || 0);
                        self.EsEspecial = ko.observable(cotizacion.EsEspecial || false);
                        self.MontoTotal = ko.observable(cotizacion.MontoTotal || 0);
                        self.ClienteId = ko.observable(cotizacion.ClienteId || -1);
                        self.TipoDeServicioId = ko.observable(cotizacion.TipoDeServicioId || -1);
                        self.MontoDeDinero = ko.observable(cotizacion.MontoDeDinero || 0);
                        self.GestionBancariaId = ko.observable(cotizacion.GestionBancariaId || -1);
                        self.TiposDeServicios = ko.observableArray(ko.utils.arrayMap(cotizacion.TiposDeServicios, function (item) { return new TipoDeServicioViewModel(item) }));
                    }

                    function IndexCotizacionViewModel(initialData) {
                        const self = this;
                        self.Cotizacion = ko.observable(new CotizacionViewModel(initialData));
                        self.MostrarMonto = ko.observable(false);
                        self.MostrarDirecciones = ko.observable(true);
                        self.MostrarOpciones = ko.observable(self.Cotizacion().MontoTotal() > 0);
                        self.TipoDeServicioIdAnterior = ko.observable();
                        self.SendingData = ko.observable(false);

                        self.RealizarEnvio = function () {
                            alert("enviando");
                        }

                        self.Guardar = function () {
                            $(".MontoTotalInput").val(ko.toJS(self.Cotizacion().MontoTotal()));
                            $("form").submit();
                        }

                        self.SeleccionarDireccion = function (data) {
                               event.preventDefault();

                            $("#myModal").modal({
                                show: true
                            });
                        }

                        self.RealizarCotizacion = function (data,event) {
                            event.preventDefault();

                            let frm = $('form');

                            if (frm.valid()) {

                                let token = $('form input[name="__RequestVerificationToken"]').val();

                                $.ajax(
                                    {
                                        url: $(event.currentTarget).attr("href"),
                                        type: "Post",
                                        data: { __RequestVerificationToken: token, cotizacion: ko.toJS(data) },
                                        beforeSend: function () {
                                            self.SendingData(true);
                                        },
                                        success: function (result) {
                                            self.Cotizacion().MontoTotal(result.MontoTotal);
                                            InicializarGrafico();
                                            $.notify({
                                                icon: 'fa fa-check-circle',
                                                message: "Cotizacion Realizada Exitosamente"
                                            });
                                        },
                                        error: function (e) {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Oops...',
                                                text: 'Algo salio mal, disculpanos!',
                                                footer: 'Consulta con el administrador del sistema.'
                                            })
                                        },
                                        complete: function () {
                                            self.SendingData(false);
                                        }
                                    }
                                );
                            }
                        }

                        //subscripciones

                        //subscripcion al TipoDeServicioId despues que su valor cambie
                        self.Cotizacion().TipoDeServicioId.subscribe(function (nuevo) {
                            if (nuevo != self.TipoDeServicioIdAnterior) {

                                if (nuevo == self.Cotizacion().GestionBancariaId()) {
                                    self.MostrarMonto(true);
                                    self.MostrarDirecciones(false);
                                    self.Cotizacion().DireccionDeOrigen("").DireccionDestino("").DistanciaOrigenDestino(0);//si no estan activas las direcciones resetearles el valor para que no se envien al servidor con el valor viejo
                                }
                                else {
                                    self.MostrarMonto(false);
                                    self.Cotizacion().MontoDeDinero(0);
                                    self.MostrarDirecciones(true);
                                }

                               self.Cotizacion().MontoTotal(0);//siempre que cambie el tipo de servicio se tiene que volver a recalcular la cotizacion
                            }
                        });

                          //subscripcion al TipoDeServicioId antes que su valor cambie
                        self.Cotizacion().TipoDeServicioId.subscribe(function (viejo) {
                            self.TipoDeServicioIdAnterior(viejo);
                        }, null,"beforeChange");

                        self.Cotizacion().MontoTotal.subscribe(function (nuevo) {
                            self.MostrarOpciones(nuevo>0);
                        });

                        //si se cambia el checkbox de EsEspecial se tiene que recalcular la cotizacion
                        self.Cotizacion().EsEspecial.subscribe(function (nuevo) {
                            self.MostrarOpciones(false);
                        });
                    };

                                        var data = @Html.HtmlConvertToJson(Model);
                                        ////controller return the serialized json date in other ISO format so we have format the date
                                        data.FechaDeLaCotizacion = formatDate(data.FechaDeLaCotizacion);
                                        data.FechaDeValidez = formatDate(data.FechaDeValidez);
                                        ko.applyBindings(new IndexCotizacionViewModel(data));

    function InicializarGrafico() {

        var values = [5, 6, 7, 5, 13, 7, 6, 7, 6, 4, 7];

        var range_map = $.range_map({
            '7:': 'green',
        });

        // Draw a sparkline for the #sparkline element
        $('#sparkline').sparkline(values, {
            type: "bar",
            barWidth: 10,
            height: 80,
            barColor: '#0083CD',
            colorMap: range_map,
            chartRangeMax: 12
        });
                    }

                                        function formatDate(dataToFormat) {
                                            let formatDate = "YYYY-MM-DD, h:mm:ss a";
                                            return moment(dataToFormat).format(formatDate)
    }

</script>
