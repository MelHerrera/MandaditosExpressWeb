@model MandaditosExpress.Models.ViewModels.EnvioViewModel

@{
    ViewBag.Title = "Realizar Envio";
}
<div data-bind="with:Envio">
    <div class="container">
        <div class="wrapper wrapper-content animated fadeInRight">
            <div class="row">
                <div class="col-md-12">
                    <div class="ibox ">
                        <div class="ibox-content align-items-center">

                            @using (Html.BeginForm())
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    @*<h4 class="fa-text-width">Ingrese la Información del Envio</h4>*@
                                    <span class="font-weight-bold">
                                        <i class="fa fa-info-circle"></i>
                                        Ingrese la Información del Envio
                                    </span>
                                    <span class="float-right" data-bind="text:FechaDelEnvio"></span>
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                    <div class="row">
                                        <div class="col-md-9">
                                            @Html.LabelFor(model => model.DescripcionDeEnvio, htmlAttributes: new { @class = "control-label" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.DescripcionDeEnvio, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.DescripcionDeEnvio, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.TiposDeServicio, htmlAttributes: new { @class = "control-label" })
                                                <select class="form-control"  data-bind = "options:TiposDeServicio, optionsText:'DescripcionTipoDeServicio',optionsValue:'Id', value:TipoDeServicioId, optionsCaption: 'Seleccionar...'"></select>
                                                @*@Html.DropDownList("TipoDeServicio", null, htmlAttributes: new { @class = "form-control", data_bind = "options:TiposDeServicio, optionsText:'DescripcionTipoDeServicio',optionsValue:'Id', value:'TipoDeServicioSelected'" })*@
                                                @Html.ValidationMessageFor(model => model.TiposDeServicio, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        @*<div class="col-md-4">
            @Html.LabelFor(model => model.ServicioId, htmlAttributes: new { @class = "control-label" })
            <div class="form-group">
                @Html.EditorFor(model => model.ServicioId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ServicioId, "", new { @class = "text-danger" })
            </div>
        </div>*@
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.ServicioId, htmlAttributes: new { @class = "control-label" })
                                                @Html.DropDownList("ServicioId", null, htmlAttributes: new { @class = "form-control" })
                                                @Html.ValidationMessageFor(model => model.ServicioId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>


                                        <input data-bind="value:TipoDeServicioId">

                                        @*<div class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(model => model.FechaDeFin, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.FechaDeFin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaDeFin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-3">
            <div class="form-group">
                @Html.LabelFor(model => model.DistanciaBase, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.DistanciaBase, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 0 } })
                @Html.ValidationMessageFor(model => model.DistanciaBase, "", new { @class = "text-danger" })
            </div>
        </div>*@
                                    </div>

                                    @*<div class="row">

                        <div class="col-md-3 CostoDeGasolinaContainer">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CostoDeGasolina, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.CostoDeGasolina, new { htmlAttributes = new { @class = "form-control CostoDeGasolina", @type = "number", @min = 0 } })
                                @Html.ValidationMessageFor(model => model.CostoDeGasolina, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3 CostoDeAsistenciaContainer">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CostoDeAsistencia, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.CostoDeAsistencia, new { htmlAttributes = new { @class = "form-control CostoDeAsistencia", @type = "number", @min = 0 } })
                                @Html.ValidationMessageFor(model => model.CostoDeAsistencia, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3 CostoDeMotorizadoContainer">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CostoDeMotorizado, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.CostoDeMotorizado, new { htmlAttributes = new { @class = "form-control CostoDeMotorizado", @type = "number", @min = 0 } })
                                @Html.ValidationMessageFor(model => model.CostoDeMotorizado, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>*@

                                    @*<div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(model => model.PrecioPorKm, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.PrecioPorKm, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = 1 } })
                                @Html.ValidationMessageFor(model => model.PrecioPorKm, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group PrecioDeRecargoContainer">
                                @Html.LabelFor(model => model.PrecioDeRecargo, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.PrecioDeRecargo, new { htmlAttributes = new { @class = "form-control PrecioDeRecargo", @type = "number", @min = 0 } })
                                @Html.ValidationMessageFor(model => model.PrecioDeRecargo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@

                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Guardar" class="btn btn-success" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="ibox-footer">
                            <div class="col-md-12">
                                @Html.ActionLink(" Regresar", "Index", null, new { @class = "btn btn-default fa fa-arrow-left" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row m-2">
        <div class="col-sm-4 p-2">
            <div class="card card-origen align-items-center" style="width:95%;height:95%" data-bind="with:LugarOrigen">
                <input id="input-origen-dir" type="text" class="form-control m-2" data-bind="value:Direccion" placeholder="Dirección de Origen" style="width:70%;z-index:3;position:absolute;border-radius:3px" />
                <div class="Map-O" style="width:337px;height:300px"></div>
                <div class="card-body">
                    <h5 class="card-title"><i class="fa fa-dot-circle-o"></i> Direccion Origen</h5>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    <a href="#" class="btn btn-primary">Go somewhere</a>
                </div>
            </div>
        </div>
        <div class="col-sm-4 p-2">
            <div class="card card-destino align-items-center" style="width:95%;height:95%;" data-bind="with:LugarDestino">
                <input id="input-destino-dir" type="text" class="form-control m-2" data-bind="value:Direccion" placeholder="Dirección de Origen" style="width:70%;z-index:3;position:absolute;border-radius:3px" />
                <div class="Map-D" style="width:337px;height:300px"></div>
                <div class="card-body">
                    <h5 class="card-title"><i class="fa fa-map-marker"></i> Direccion Destino</h5>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                    <a data-bind="click:$root.GoogleMapDetails" class="btn btn-primary" target="_blank">Ver en Google Maps</a>
                </div>
            </div>
        </div>
    </div>

</div>
<pre>
<code data-bind="html: JSON.stringify(ko.toJS($root), null, 3)"></code>
</pre>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDmKbJfbvqtbp9AoRjEAn-90N75Wa2CdIg"></script>
@Scripts.Render("~/plugins/locationpicker")
@Scripts.Render("~/plugins/knockout")
<script src="~/Scripts/knockout/knockout.mapping.js"></script>

<script type="text/javascript">

    function IndexEnvioViewmodel(initialData) {
        const self = this;
        self.Envio = ko.observable(initialData);
        self.GoogleMapDetails = function (data, event) {
            console.log(data);
            //window.location.href = "https://www.google.com/maps?ll=" + data.Longitud() + "," +
            //    data.Latitud() + "&z=15&t=m&hl=es-ES&gl=US&mapclient=apiv3&cid=5977138221004860713";
        }
        self.Envio().TipoDeServicioId.subscribe(function (valor) {
            getServiciosFiltrados(valor);
        });

        //funciones privadas
        function getServiciosFiltrados(id) {
            event.preventDefault();

                let token = $('form input[name="__RequestVerificationToken"]').val();

                $.ajax(
                    {
                        url: "@Url.Action("FiltrarServicio","Envios")",
                        type: "Get",
                        data: { __RequestVerificationToken: token, id: id },
                        beforeSend: function () {
                            //self.SendingData(true);
                            //self.EnableBtnCotizar(false);
                        },
                        success: function (result) {
                            if (result.exito) {
                                self.Envio().TiposDeServicio(result.data);
                         
                                $.notify({
                                    icon: 'fa fa-check-circle',
                                    message: "Cotizacion Realizada Exitosamente"
                                });
                            }
                            else {
                                if (!result.exito) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: "No se pudo obtener la Informacion Solicitada, Consulta con el administrador del sistema"
                                    })
                                }
                            }
                        },
                        error: function (e) {
                            alert(e.responseText);
                        },
                        complete: function () {
                            //self.SendingData(false);
                            //self.EnableBtnCotizar(true);
                        }
                    }
                );
        }
    }

    $(".Map-O").locationpicker({
        location: {
            latitude: 12.128145869138876,
            longitude: -86.26501267501537
        },
        radius: 0,
        enableAutocomplete: true,
        inputBinding: {
            //latitudeInput: $("#MapAddresLatitud"),
            //longitudeInput: $("#MapAddresLongitud"),
            locationNameInput: $("#input-origen-dir")
        }
    });


    $(".Map-D").locationpicker({
        location: {
            latitude: 12.128145869138876,
            longitude: -86.26501267501537
        },
        radius: 0,
        enableAutocomplete: true,
        inputBinding: {
            //latitudeInput: $("#MapAddresLatitud"),
            //longitudeInput: $("#MapAddresLongitud"),
            locationNameInput: $("#input-destino-dir")
        }
    });

    window.addEventListener('resize', function (e) {

        //a veces jquery no logra detectar bien el resize , entonces esperar 1 segundo antes de cualquier accion
        clearTimeout(t || -1);//limpiar cualquier time out que haya
        var t = setTimeout(resizeWidthMap(".Map-O", ".card-origen"), 1000);

        clearTimeout(y || -1);//limpiar cualquier time out que haya
        var y = setTimeout(resizeWidthMap(".Map-D", ".card-destino"), 1000);
    });

    function getElementWidthByClass(clase) {
        return $(clase).width()
    }
    function resizeWidthMap(mapClass,parentclass) {
        let divMap = $(mapClass);
        divMap.width(getElementWidthByClass(parentclass));//establecer al map el mismo ancho que el card
    }

    $(function () {
        //al Cargar establecer al map el mismo ancho que el card
        //a veces jquery no logra detectar bien el resize , entonces esperar 1 segundo antes de cualquier accion
        clearTimeout(t || -1);//limpiar cualquier time out que haya
        var t = setTimeout(resizeWidthMap(".Map-O",".card-origen"), 1000);

        clearTimeout(y || -1);//limpiar cualquier time out que haya
        var y = setTimeout(resizeWidthMap(".Map-D",".card-destino"), 2000);

        //knockout model data
        let data = @Html.HtmlConvertToJson(Model);

        let viewModel = new IndexEnvioViewmodel(ko.mapping.fromJS(data));
        ko.applyBindings(viewModel);
    });

</script>