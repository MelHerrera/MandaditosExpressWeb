@model MandaditosExpress.Models.ViewModels.EnvioViewModel

@{
    ViewBag.Title = "Realizar Envio";
}

<link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">

<div data-bind="with:Envio">
    <div class="container">
        <div class="wrapper wrapper-content animated fadeInRight">
            <div class="row">
                <div class="col-md-12">
                    <div class="ibox ">
                        <div class="ibox-content align-items-center">

                            @using (Html.BeginForm())
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <span class="font-weight-bold">
                                        <i class="fa fa-info-circle"></i>
                                        Ingrese la Información del Envio
                                    </span>
                                    <span class="badge badge-success float-right" data-bind="text:FechaDelEnvio"></span>
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                    <div class="row">
                                        <div class="col-md-9">
                                            @Html.LabelFor(model => model.DescripcionDeEnvio, htmlAttributes: new { @class = "control-label" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.DescripcionDeEnvio, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.DescripcionDeEnvio, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.TiposDeServicio, htmlAttributes: new { @class = "control-label" })
                                                <select class="form-control" data-bind="options:TiposDeServicio, optionsText:'DescripcionTipoDeServicio',optionsValue:'Id', value:TipoDeServicioId"></select>
                                                @*@Html.DropDownList("TipoDeServicio", null, htmlAttributes: new { @class = "form-control", data_bind = "options:TiposDeServicio, optionsText:'DescripcionTipoDeServicio',optionsValue:'Id', value:'TipoDeServicioSelected'" })*@
                                                @Html.ValidationMessageFor(model => model.TiposDeServicio, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.ServicioId, htmlAttributes: new { @class = "control-label" })
                                                <select class="form-control" data-bind="options:Servicios, optionsText:'DescripcionDelServicio',optionsValue:'Id', value:ServicioId"></select>
                                                @*@Html.DropDownList("ServicioId", null, htmlAttributes: new { @class = "form-control", data_bind = "options:Servicios, optionsText:'DescripcionDelServicio',optionsValue:'Id', value:ServicioId" })*@
                                                @Html.ValidationMessageFor(model => model.ServicioId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-4">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.NombresDelReceptor, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.NombresDelReceptor, new { htmlAttributes = new { @class = "form-control " } })
                                                @Html.ValidationMessageFor(model => model.NombresDelReceptor, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CedulaDelReceptor, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.CedulaDelReceptor, new { htmlAttributes = new { @class = "form-control CostoDeAsistencia" } })
                                                @Html.ValidationMessageFor(model => model.CedulaDelReceptor, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.TelefonoDelReceptor, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.TelefonoDelReceptor, new { htmlAttributes = new { @class = "form-control-sm CostoDeMotorizado" } })
                                                @Html.ValidationMessageFor(model => model.TelefonoDelReceptor, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MontoDeDinero, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.MontoDeDinero, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.MontoDeDinero, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.TipoDePagoId, htmlAttributes: new { @class = "control-label" })
                                                <select class="form-control" data-bind="options:TiposDePago, optionsText:'Descripcion',optionsValue:'Id', value:TipoDePagoId"></select>
                                                @Html.ValidationMessageFor(model => model.TipoDePagoId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Ancho, htmlAttributes: new { @class = "control-label" })
                                                @*@Html.EditorFor(model => model.Ancho, new { htmlAttributes = new { @class = "form-control-sm" } })*@
                                                <input type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-size="xs" data-on="Si" data-off="No" name="Ancho">
                                                @Html.ValidationMessageFor(model => model.Ancho, "", new { @class = "text-danger" })

                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Alto, htmlAttributes: new { @class = "control-label" })
                                                @*@Html.EditorFor(model => model.Alto, new { htmlAttributes = new { @class = "form-control-sm" } })*@
                                                <input type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-size="xs" data-on="Si" data-off="No" name="Ancho">
                                                @Html.ValidationMessageFor(model => model.Alto, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Peso, htmlAttributes: new { @class = "control-label" })
                                                @*@Html.EditorFor(model => model.Peso, new { htmlAttributes = new { @class = "form-control-sm" } })*@
                                                <input type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-size="xs" data-on="Si" data-off="No" name="Ancho">
                                                @Html.ValidationMessageFor(model => model.Peso, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row justify-content-center">
                                        <div class="col-sm-5 p-2">
                                            <label class="font-weight-bold"> Selecciona tu Ubicación</label>
                                            <div class="card card-origen align-items-center" style="width:95%;height:95%" data-bind="with:LugarOrigen">
                                                <input id="input-origen-dir" type="text" class="form-control m-2" data-bind="value:Direccion" placeholder="Dirección de Origen" style="width:70%;z-index:3;position:absolute;border-radius:3px" />
                                                <div class="Map-O" style="width:337px;height:300px"></div>
                                                <div class="card-body" style="width:inherit">
                                                    <h5 class="card-title"><i class="fa fa-dot-circle-o"></i> Direccion Origen</h5>
                                                    <p class="card-text" data-bind="text:Direccion"></p>

                                                    <div class="form-inline">
                                                        <div class="form-group">
                                                            <label for="input-origen-lat" class="font-weight-bold">Latitud:</label>
                                                            <input type="text" class="form-control-plaintext pr-0 mr-0" data-bind="value:Latitud" id="input-origen-lat" style="width:70%" />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="input-origen-long" class="font-weight-bold">Longitud:</label>
                                                            <input type="text" class="form-control-plaintext" data-bind="value:Longitud" id="input-origen-long" style="width:70%" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-2 align-self-center">
                                            <h1> <span data-bind="text:DistanciaEntregaRecep"></span> Km</h1>
                                        </div>

                                        <div class="col-sm-5 p-2">
                                            <label class="font-weight-bold"> Selecciona la Ubicación del receptor</label>
                                            <div class="card card-destino align-items-center" style="width:95%;height:95%;" data-bind="with:LugarDestino">
                                                <input id="input-destino-dir" type="text" class="form-control m-2" data-bind="value:Direccion" placeholder="Dirección de Origen" style="width:70%;z-index:3;position:absolute;border-radius:3px" />
                                                <div class="Map-D" style="width:337px;height:300px"></div>
                                                <div class="card-body" style="width:inherit">
                                                    <h5 class="card-title"><i class="fa fa-map-marker"></i> Direccion Destino</h5>
                                                    <p class="card-text" data-bind="text:Direccion"></p>

                                                    <div class="form-inline">
                                                        <div class="form-group">
                                                            <label for="input-dest-lat" class="font-weight-bold">Latitud:</label>
                                                            <input type="text" class="form-control-plaintext pr-0 mr-0" data-bind="value:Latitud" id="input-dest-lat" style="width:70%" />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="input-dest-long" class="font-weight-bold">Longitud:</label>
                                                            <input type="text" class="form-control-plaintext" data-bind="value:Longitud" id="input-dest-long" style="width:70%" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.EsUrgente, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.EsUrgente, new { htmlAttributes = new { @class = "form-control-sm" } })
                                                @Html.ValidationMessageFor(model => model.EsUrgente, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Guardar" class="btn btn-success" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="ibox-footer">
                            <div class="col-md-12">
                                @Html.ActionLink(" Regresar", "Index", null, new { @class = "btn btn-default fa fa-arrow-left" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDmKbJfbvqtbp9AoRjEAn-90N75Wa2CdIg"></script>
@Scripts.Render("~/plugins/locationpicker")
@Scripts.Render("~/plugins/knockout")
@Scripts.Render("~/plugins/moment")
@Scripts.Render("~/plugins/switch")
@Scripts.Render("~/plugins/sweetalert")
<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>
<script src="~/Scripts/knockout/knockout.mapping.js"></script>

<script type="text/javascript">

    function IndexEnvioViewmodel(initialData) {
        const self = this;

        //formatear la fecha.
        let fechaFormatted = formatDate(initialData.FechaDelEnvio())
        initialData.FechaDelEnvio = fechaFormatted;

        self.Envio = ko.observable(initialData);
        self.MostrarMonto = ko.observable(false);

        self.Envio().TipoDeServicioId.subscribe(function (valor) {
            if (valor) {
                getServiciosFiltrados(valor);
            }
        });

        self.CalcularDistancia = ko.computed(function () {
            if (self.Envio().LugarOrigen.Latitud() && self.Envio().LugarOrigen.Longitud() &&
                self.Envio().LugarDestino.Latitud() && self.Envio().LugarDestino.Longitud()) {

                let origen = new google.maps.LatLng(self.Envio().LugarOrigen.Latitud(), self.Envio().LugarOrigen.Longitud());
                let destino = new google.maps.LatLng(self.Envio().LugarDestino.Latitud(), self.Envio().LugarDestino.Longitud());

                CalcularDistancia(origen, destino);
            }

        });

        function CalcularDistancia(origen, destino) {
            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix(
                {
                    origins: [origen],
                    destinations: [destino],
                    travelMode: 'DRIVING',
                    unitSystem: google.maps.UnitSystem.METRIC
                }, CalcularDistanciaResponse);
        }

        function CalcularDistanciaResponse(response, status) {
            if (status == "OK") {
                self.Envio().DistanciaEntregaRecep((response.rows[0].elements[0].distance.value)/1000);
            }
            else {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Algo salio mal, disculpanos!',
                    footer: 'Consulta con el administrador del sistema.'
                })
            }
        }

        //funciones privadas
        function getServiciosFiltrados(id) {
           /* event.preventDefault();*/

                let token = $('form input[name="__RequestVerificationToken"]').val();

                $.ajax(
                    {
                        url: "@Url.Action("FiltrarServicio","Envios")",
                        type: "Get",
                        data: { __RequestVerificationToken: token, id: id },
                        beforeSend: function () {
                            //self.SendingData(true);
                            //self.EnableBtnCotizar(false);
                        },
                        success: function (result) {
                            if (result.exito) {
                                self.Envio().Servicios([]);
                                ko.utils.arrayPushAll(self.Envio().Servicios, result.data);
                            }
                            else {
                                if (!result.exito) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: "No se pudo obtener la Informacion Solicitada, Consulta con el administrador del sistema"
                                    })
                                }
                            }
                        },
                        error: function (e) {
                            alert(e.responseText);
                        },
                        complete: function () {
                            //self.SendingData(false);
                            //self.EnableBtnCotizar(true);
                        }
                    }
                );
        }

    }

    function formatDate(dataToFormat) {
        let formatDate = "YYYY-MM-DD, h:mm:ss a";
        return moment(dataToFormat).format(formatDate)
    }

        $(".Map-O").locationpicker({
            location: {
                latitude: 12.128145869138876,
                longitude: -86.26501267501537
            },
            radius: 0,
            enableAutocomplete: true,
            inputBinding: {
                latitudeInput: $("#input-origen-lat"),
                longitudeInput: $("#input-origen-long"),
                locationNameInput: $("#input-origen-dir")
            },
            onchanged: function (currentLocation, radius, isMarkerDropped) {
                console.log($(this));
            }
        });


    $(".Map-D").locationpicker({
        location: {
            latitude: 12.128145869138876,
            longitude: -86.26501267501537
        },
        radius: 0,
        enableAutocomplete: true,
        inputBinding: {
            latitudeInput: $("#input-dest-lat"),
            longitudeInput: $("#input-dest-long"),
            locationNameInput: $("#input-destino-dir")
        }, onchanged: function (currentLocation, radius, isMarkerDropped) {
            var mapContext = $(this).locationpicker('map');
        }
    });

    window.addEventListener('resize', function (e) {

        //a veces jquery no logra detectar bien el resize , entonces esperar 1 segundo antes de cualquier accion
        clearTimeout(t || -1);//limpiar cualquier time out que haya
        var t = setTimeout(resizeWidthMap(".Map-O", ".card-origen"), 1000);

        clearTimeout(y || -1);//limpiar cualquier time out que haya
        var y = setTimeout(resizeWidthMap(".Map-D", ".card-destino"), 1000);
    });

    function getElementWidthByClass(clase) {
        return $(clase).width()
    }
    function resizeWidthMap(mapClass,parentclass) {
        let divMap = $(mapClass);
        divMap.width(getElementWidthByClass(parentclass));//establecer al map el mismo ancho que el card
    }

    $(function () {
        //al Cargar establecer al map el mismo ancho que el card
        //a veces jquery no logra detectar bien el resize , entonces esperar 1 segundo antes de cualquier accion
        clearTimeout(t || -1);//limpiar cualquier time out que haya
        var t = setTimeout(resizeWidthMap(".Map-O",".card-origen"), 1000);

        clearTimeout(y || -1);//limpiar cualquier time out que haya
        var y = setTimeout(resizeWidthMap(".Map-D",".card-destino"), 2000);

        //knockout model data
        let data = @Html.HtmlConvertToJson(Model);

        let viewModel = new IndexEnvioViewmodel(ko.mapping.fromJS(data));
        ko.applyBindings(viewModel);
    });

</script>