@model MandaditosExpress.Models.ViewModels.EnvioViewModel

@{
    ViewBag.Title = "Realizar Envio";
}

@section Styles{
    @Styles.Render("~/Plugin/switches")
}

<div data-bind="with:Envio">
    <div class="container">
        <div class="wrapper wrapper-content animated fadeInRight">
            <div class="row">
                <div class="col-md-12">
                    <div class="ibox ">
                        <div class="ibox-content align-items-center">

                            @using (Html.BeginForm())
                            {
                                @Html.AntiForgeryToken()

                                <div class="form-horizontal">
                                    <span class="font-weight-bold">
                                        <i class="fa fa-info-circle"></i>
                                        Ingrese la Información del Envio
                                    </span>
                                    <span class="badge badge-primary float-right">
                                        <i class="fa fa-calendar mr-1"></i>
                                        <span data-bind="text:FechaDelEnvio"></span>
                                    </span>
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                                    <div class="row">
                                        <div class="col-md-9">
                                            @Html.LabelFor(model => model.DescripcionDeEnvio, htmlAttributes: new { @class = "control-label" })
                                            <div class="form-group">
                                                @Html.EditorFor(model => model.DescripcionDeEnvio, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.DescripcionDeEnvio, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.TipoDeServicioId, htmlAttributes: new { @class = "control-label" })
                                                <select class="form-control" name="TipoDeServicioId" data-bind="options:TiposDeServicio, optionsText:'DescripcionTipoDeServicio',optionsValue:'Id', value:TipoDeServicioId" required></select>
                                                @Html.ValidationMessageFor(model => model.TipoDeServicioId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-5">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.ServicioId, htmlAttributes: new { @class = "control-label" })
                                                <select class="form-control" data-bind="options: Servicios, optionsText:'DescripcionDelServicio',optionsValue:'Id', value:ServicioId"></select>
                                                @Html.ValidationMessageFor(model => model.ServicioId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-4">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.NombresDelReceptor, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.NombresDelReceptor, new { htmlAttributes = new { @class = "form-control " } })
                                                @Html.ValidationMessageFor(model => model.NombresDelReceptor, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-3">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CedulaDelReceptor, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.CedulaDelReceptor, new { htmlAttributes = new { @class = "form-control CedulaReceptor" } })
                                                @Html.ValidationMessageFor(model => model.CedulaDelReceptor, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.TelefonoDelReceptor, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.TelefonoDelReceptor, new { htmlAttributes = new { @class = "form-control-sm TelefonoReceptor", @type = "number" } })
                                                @Html.ValidationMessageFor(model => model.TelefonoDelReceptor, "", new { @class = "text-danger" })
                                            </div>
                                        </div>

                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MontoDeDinero, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.MontoDeDinero, new { htmlAttributes = new { @class = "form-control", data_bind = "enable: $root.MostrarMonto" } })
                                                @Html.ValidationMessageFor(model => model.MontoDeDinero, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="chk_urgente" class="control-label" style="display:block">Es Urgente?</label>
                                                <input type="checkbox" name="EsUrgente" data-bind="checked:EsUrgente, bsSwitchButton: {}" id="chk_urgente" data-size="xs">
                                                @Html.ValidationMessageFor(model => model.EsUrgente, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-3">
                                            <div class="form-group">
                                                <label name="Peso" class="control-label" style="display:block">¿El peso es menor a 50 Libras?</label>
                                                <input type="checkbox" data-bind="checked: Peso, bsSwitchButton: {}" data-size="xs" id="chk_peso" name="Peso">
                                                @Html.ValidationMessageFor(model => model.Peso, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="DebeRegresarATienda" class="control-label" style="display:block">¿Es ida y regreso?</label>
                                                <input type="checkbox" data-bind="checked: DebeRegresarATienda, bsSwitchButton: {}" data-size="xs" name="DebeRegresarATienda" id="switch-deberegresar-tienda">
                                                @Html.ValidationMessageFor(model => model.DebeRegresarATienda, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <!--ko if: $root.MostrarSwitchDebeRecibirDinero-->
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="DebeRecibirDinero" class="control-label" style="display:block">¿El motorizado recibirá algun dinero?</label>
                                                <input type="checkbox" data-bind="checked: DebeRecibirDinero, bsSwitchButton: {}" data-size="xs" name="DebeRecibirDinero" id="debe-recibir-dinero">
                                                @Html.ValidationMessageFor(model => model.DebeRecibirDinero, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <!--/ko -->
                                        <!--ko if: ($root.MostrarMontoDineroRecibeMotorizado() && $root.MostrarSwitchDebeRecibirDinero )-->
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MontoARecibir, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.MontoARecibir, new { htmlAttributes = new { @class = "form-control", data_bind = "text:MontoARecibir" } })
                                                @Html.ValidationMessageFor(model => model.MontoARecibir, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <!--/ko-->
                                        <!--ko if: ($root.MostrarMontoDineroRecibeMotorizado() && $root.MostrarSwitchDebeRecibirDinero )-->
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                <label for="DebeRecibirCambio" class="control-label" style="display:block">¿El motorizado necesita cambio?</label>
                                                <input type="checkbox" data-bind="checked: DebeRecibirCambio, bsSwitchButton: {}" data-size="xs" name="DebeRecibirCambio" id="debe-llevar-cambio">
                                                @Html.ValidationMessageFor(model => model.DebeRecibirCambio, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <!--/ko-->
                                        <!--ko if: ($root.MostrarMontoCambio() && $root.MostrarSwitchDebeRecibirDinero)-->
                                        <div class="col-md-2">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.MontoCambio, htmlAttributes: new { @class = "control-label" })
                                                @Html.EditorFor(model => model.MontoCambio, new { htmlAttributes = new { @class = "form-control", data_bind = "text: MontoCambio" } })
                                                @Html.ValidationMessageFor(model => model.MontoCambio, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <!--/ko-->
                                    </div>

                                    <div class="row justify-content-center">
                                        <div class="col-sm-5 p-2">
                                            <label class="font-weight-bold"> Selecciona tu Ubicación</label>
                                            <div class="card card-origen align-items-center" style="width:95%;height:95%" data-bind="with:LugarOrigen">
                                                <input id="input-origen-dir" type="text" class="form-control m-2" data-bind="value:Direccion" placeholder="Dirección de Origen" style="width:70%;z-index:3;position:absolute;border-radius:3px" />
                                                <div class="Map-O" style="width:337px;height:300px"></div>
                                                <div class="card-body" style="width:inherit">
                                                    <h5 class="card-title"><i class="fa fa-dot-circle-o"></i> Direccion Origen</h5>
                                                    <p class="card-text" data-bind="text:Direccion"></p>

                                                    <div class="form-inline">
                                                        <div class="form-group">
                                                            <label for="input-origen-lat" class="font-weight-bold">Latitud:</label>
                                                            <input type="text" class="form-control-plaintext pr-0 mr-0" data-bind="value:Latitud" id="input-origen-lat" style="width:70%" />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="input-origen-long" class="font-weight-bold">Longitud:</label>
                                                            <input type="text" class="form-control-plaintext" data-bind="value:Longitud" id="input-origen-long" style="width:70%" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-2 align-self-center">
                                            <h1> <span data-bind="text:DistanciaEntregaRecep"></span> Km</h1>
                                        </div>

                                        <div class="col-sm-5 p-2">
                                            <label class="font-weight-bold"> Selecciona la Ubicación del receptor</label>
                                            <div class="card card-destino align-items-center" style="width:95%;height:95%;" data-bind="with:LugarDestino">
                                                <input id="input-destino-dir" type="text" class="form-control m-2" data-bind="value:Direccion" placeholder="Dirección de Origen" style="width:70%;z-index:3;position:absolute;border-radius:3px" />
                                                <div class="Map-D" style="width:337px;height:300px"></div>
                                                <div class="card-body" style="width:inherit">
                                                    <h5 class="card-title"><i class="fa fa-map-marker"></i> Direccion Destino</h5>
                                                    <p class="card-text" data-bind="text:Direccion"></p>

                                                    <div class="form-inline">
                                                        <div class="form-group">
                                                            <label for="input-dest-lat" class="font-weight-bold">Latitud:</label>
                                                            <input type="text" class="form-control-plaintext pr-0 mr-0" data-bind="value:Latitud" id="input-dest-lat" style="width:70%" />
                                                        </div>
                                                        <div class="form-group">
                                                            <label for="input-dest-long" class="font-weight-bold">Longitud:</label>
                                                            <input type="text" class="form-control-plaintext" data-bind="value:Longitud" id="input-dest-long" style="width:70%" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="mt-4">
                                        <div class="row">
                                            <div class="col">
                                                <h4 class="font-weight-bold">Costo del envío</h4>
                                            </div>
                                            <div class="col">
                                                <input type="submit" value="Solicitar Envío" class="btn btn-primary float-right ml-2 " />
                                                <input type="submit" value="Ver Costo" class="btn btn-primary float-right" data-bind="click:$root.CalcularMonto" />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="card mt-2">
                                        <div class="card-body">
                                            <div class="row no-margins no-padding">
                                                <div class="col-3 align-items-center"><span id="sparkline" class="m-0"></span></div>
                                                <div class="col-9 align-items-center">
                                                    <div class="row">
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                @Html.LabelFor(model => model.TipoDePagoId, htmlAttributes: new { @class = "control-label font-weight-bold" })
                                                                <select class="form-control" data-bind="options:TiposDePago, optionsText:'Descripcion',optionsValue:'Id', value:TipoDePagoId"></select>
                                                                @Html.ValidationMessageFor(model => model.TipoDePagoId, "", new { @class = "text-danger" })
                                                            </div>
                                                        </div>

                                                        <div class="col-md-5">
                                                            <label for="">Monto Total</label>
                                                            <div class="input-group h2 no-margins">
                                                                <h2 class="font-weight-bold h2 m-0">
                                                                    C$
                                                                    <span data-bind="text:MontoTotalDelEnvio" class="text-danger">0</span>
                                                                </h2>
                                                            </div>

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <small class="text-black-50 mt-2">Precios ya incluyen IVA</small>

                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="ibox-footer">
                            <div class="col-md-12">
                                @Html.ActionLink(" Regresar", "Index", null, new { @class = "btn btn-default fa fa-arrow-left" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDmKbJfbvqtbp9AoRjEAn-90N75Wa2CdIg"></script>
    @Scripts.Render("~/plugins/locationpicker")
    @Scripts.Render("~/plugins/switch")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/moment")
    @Scripts.Render("~/plugins/sweetalert")
    <script src="~/Scripts/knockout/knockout.mapping.js"></script>
    <script src="~/Scripts/plugins/jquerymask/jquery.mask.js"></script>
    @Scripts.Render("~/plugins/sparkline")
    @Scripts.Render("~/plugins/notify")

<script type="text/javascript">

    function IndexEnvioViewmodel(initialData) {
        const self = this;

        //formatear la fecha.
        let fechaFormatted = formatDate(initialData.FechaDelEnvio())
        initialData.FechaDelEnvio = fechaFormatted;

        self.Envio = ko.observable(initialData);
        self.MostrarMonto = ko.observable(false);
        self.IsInvalidLocation = ko.observable(false);

        self.MostrarSwitchDebeRecibirDinero = ko.computed(function () {
            return self.Envio().DebeRegresarATienda();
        });

        self.MostrarMontoDineroRecibeMotorizado = ko.computed(function () {
            return self.Envio().DebeRecibirDinero();
        });

        self.MostrarMontoCambio = ko.computed(function () {
            return self.Envio().DebeRecibirCambio();
        });

        self.Envio().TipoDeServicioId.subscribe(function (valor) {
            if (valor) {
                getServiciosFiltrados(valor);

                //mostrar el campo monto si son gestiones bancarias
                if (valor == self.Envio().GestionBancariaId())
                    self.MostrarMonto(true);
                else
                    self.MostrarMonto(false);
            }
        });

        self.CalcularDistancia = ko.computed(function () {
            if (self.Envio().LugarOrigen.Latitud() && self.Envio().LugarOrigen.Longitud() &&
                self.Envio().LugarDestino.Latitud() && self.Envio().LugarDestino.Longitud()) {

                let origen = new google.maps.LatLng(self.Envio().LugarOrigen.Latitud(), self.Envio().LugarOrigen.Longitud());
                let destino = new google.maps.LatLng(self.Envio().LugarDestino.Latitud(), self.Envio().LugarDestino.Longitud());

                CalcularDistancia(origen, destino);
            }

        });

        self.InicializarMapas = function () {
            InicializarMapaOrigen();
            InicializarMapaDestino();
        }

        self.CalcularMonto = function (data, event) {
            event.preventDefault();

            if (data.DistanciaEntregaRecep() > 0) {
                     $.ajax(
                    {
                        url:  "@Url.Action("CostoDelEnvio", "Envios")",
                        type: "Get",
                        data: { TipoDeServicioId: data.TipoDeServicioId(), Fecha: data.FechaDelEnvio, Distancia: data.DistanciaEntregaRecep(), Urgente: data.EsUrgente(), MontoGestion: data.MontoDeDinero() },
                        beforeSend: function () {
                           //mostrar informacion de que se esta haciendo la peticion
                        },
                        success: function (response) {
                            if (response.exito) {
                                self.Envio().MontoTotalDelEnvio(response.data);
                            }
                            else {
                                $.notify({
                                    icon: 'fa fa-exclamation-circle',
                                    message: response.message
                                });
                            }
                        },
                        error: function (e) {
                            $.notify({
                                icon: 'fa fa-exclamation-circle',
                                message: "Ha ocurrido un error procesando su solicitud! error 500"
                            });
                        },
                        complete: function () {
                           //mostrar informacion de fin de la peticion
                        }
                    }
                );
            }
            else {
                Swal.fire({
                    icon: 'error',
                    text: 'Estimado Cliente debe proporcionar una ubicación origen-destino válida'
                })
            }

        }

        //funciones privadas

        function InicializarMapaOrigen() {
            $(".Map-O").locationpicker({
                location: {
                    latitude: 12.128145869138876,
                    longitude: -86.26501267501537
                },
                radius: 0,
                enableAutocomplete: true,
                inputBinding: {
                    latitudeInput: $("#input-origen-lat"),
                    longitudeInput: $("#input-origen-long"),
                    locationNameInput: $("#input-origen-dir")
                },
                onchanged: function (currentLocation, radius, isMarkerDropped) {

                    let addressComponents = $(this).locationpicker('map').location.addressComponents;

                    if (addressComponents.country != 'NI' || addressComponents.stateOrProvince != 'MN') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops... Disculpanos',
                            text: 'Actualmente, solo hacemos envios en Managua. Para mayor información Contacte con Atención al Cliente',
                        })
                        //inicializar las direcciones como al cargar la página
                        self.IsInvalidLocation(true);
                        self.Envio().DistanciaEntregaRecep(0);
                    }
                    else
                        self.IsInvalidLocation(false);
                }
            });
        }

        function InicializarMapaDestino() {
            $(".Map-D").locationpicker({
                location: {
                    latitude: 12.128145869138876,
                    longitude: -86.26501267501537
                },
                radius: 0,
                enableAutocomplete: true,
                inputBinding: {
                    latitudeInput: $("#input-dest-lat"),
                    longitudeInput: $("#input-dest-long"),
                    locationNameInput: $("#input-destino-dir")
                }, onchanged: function (currentLocation, radius, isMarkerDropped) {
                    let addressComponents = $(this).locationpicker('map').location.addressComponents;

                    if (addressComponents.country != 'NI' || addressComponents.stateOrProvince != 'MN') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops... Disculpanos',
                            text: 'Actualmente, solo hacemos envios en Managua. Para mayor información Contacte con Atención al Cliente',
                        })
                        //inicializar las direcciones como al cargar la página
                        self.IsInvalidLocation(true);
                        self.Envio().DistanciaEntregaRecep(0);
                    }
                    else
                        self.IsInvalidLocation(false);
                }
            });
        }

        function CalcularDistancia(origen, destino) {
            var service = new google.maps.DistanceMatrixService();
            service.getDistanceMatrix(
                {
                    origins: [origen],
                    destinations: [destino],
                    travelMode: 'DRIVING',
                    unitSystem: google.maps.UnitSystem.METRIC
                }, CalcularDistanciaResponse);
        }

        function CalcularDistanciaResponse(response, status) {
            if (!self.IsInvalidLocation()) {
                if (status == "OK") {
                    let distance = (response?.rows[0]?.elements[0]?.distance?.value) / 1000;
                    self.Envio().DistanciaEntregaRecep(distance || 0);
                }
            }
            else {
                self.Envio().LugarOrigen.Direccion('Managua 14005, Nicaragua').Latitud(12.128145869138876).Longitud(-86.26501267501537);
                self.Envio().LugarDestino.Latitud(12.128145869138876).Longitud(-86.26501267501537);
            }
        }

        function getServiciosFiltrados(id) {
           /* event.preventDefault();*/

                let token = $('form input[name="__RequestVerificationToken"]').val();

                $.ajax(
                    {
                        url: "@Url.Action("FiltrarServicio","Envios")",
                        type: "Get",
                        data: { __RequestVerificationToken: token, id: id },
                        beforeSend: function () {
                            //self.SendingData(true);
                            //self.EnableBtnCotizar(false);
                        },
                        success: function (result) {
                            if (result.exito) {
                                self.Envio().Servicios([]);
                                ko.utils.arrayPushAll(self.Envio().Servicios, result.data);
                            }
                            else {
                                if (!result.exito) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Oops...',
                                        text: "No se pudo obtener la Informacion Solicitada, Consulta con el administrador del sistema"
                                    })
                                }
                            }
                        },
                        error: function (e) {
                            alert(e.responseText);
                        },
                        complete: function () {
                            //self.SendingData(false);
                            //self.EnableBtnCotizar(true);
                        }
                    }
                );
        }

    }

    function formatDate(dataToFormat) {
        let formatDate = "YYYY-MM-DD, h:mm:ss a";
        return moment(dataToFormat).format(formatDate)
    }


    window.addEventListener('resize', function (e) {

        //a veces jquery no logra detectar bien el resize , entonces esperar 1 segundo antes de cualquier accion
        clearTimeout(t || -1);//limpiar cualquier time out que haya
        var t = setTimeout(resizeWidthMap(".Map-O", ".card-origen"), 1000);

        clearTimeout(y || -1);//limpiar cualquier time out que haya
        var y = setTimeout(resizeWidthMap(".Map-D", ".card-destino"), 1000);
    });

    function getElementWidthByClass(clase) {
        return $(clase).width()
    }
    function resizeWidthMap(mapClass,parentclass) {
        let divMap = $(mapClass);
        divMap.width(getElementWidthByClass(parentclass));//establecer al map el mismo ancho que el card
    }



        function InicializarGrafico() {

            var values = [5, 6, 7, 5, 13, 7, 6, 7, 6, 4, 7];

            var range_map = $.range_map({
                '7:': 'green',
            });

            // Draw a sparkline for the #sparkline element
            $('#sparkline').sparkline(values, {
                type: "bar",
                barWidth: 10,
                height: 80,
                barColor: '#0083CD',
                colorMap: range_map,
                chartRangeMax: 12
            });
        }

        //funcion despues que carga la pagina
        $(function () {

                    //knockout model data
        let data = @Html.HtmlConvertToJson(Model);

        let viewModel = new IndexEnvioViewmodel(ko.mapping.fromJS(data));
            ko.applyBindings(viewModel);
            viewModel.InicializarMapas();


            //mascara de la cédula
            $('.CedulaReceptor').mask('453-170998-1000S', { placeholder: "001-03121995-0005D" });

           InicializarGrafico();//inicializar la grafica despues que carga la pagina


        //al Cargar establecer al map el mismo ancho que el card
        //a veces jquery no logra detectar bien el resize , entonces esperar 1 segundo antes de cualquier accion
        clearTimeout(t || -1);//limpiar cualquier time out que haya
        var t = setTimeout(resizeWidthMap(".Map-O",".card-origen"), 1000);

        clearTimeout(y || -1);//limpiar cualquier time out que haya
        var y = setTimeout(resizeWidthMap(".Map-D",".card-destino"), 2000);
    });

</script>
}

